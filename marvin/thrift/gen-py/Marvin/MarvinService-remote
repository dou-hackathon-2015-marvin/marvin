#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from Marvin import MarvinService
from Marvin.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string say_hello()')
  print('  string say_echo(string str)')
  print('  bool send_file_request(string path, string job_id, i32 size)')
  print('  void send_chunk(string job_id, string chunk)')
  print('  void finish_sending(string job_id)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = MarvinService.Client(protocol)
transport.open()

if cmd == 'say_hello':
  if len(args) != 0:
    print('say_hello requires 0 args')
    sys.exit(1)
  pp.pprint(client.say_hello())

elif cmd == 'say_echo':
  if len(args) != 1:
    print('say_echo requires 1 args')
    sys.exit(1)
  pp.pprint(client.say_echo(args[0],))

elif cmd == 'send_file_request':
  if len(args) != 3:
    print('send_file_request requires 3 args')
    sys.exit(1)
  pp.pprint(client.send_file_request(args[0],args[1],eval(args[2]),))

elif cmd == 'send_chunk':
  if len(args) != 2:
    print('send_chunk requires 2 args')
    sys.exit(1)
  pp.pprint(client.send_chunk(args[0],args[1],))

elif cmd == 'finish_sending':
  if len(args) != 1:
    print('finish_sending requires 1 args')
    sys.exit(1)
  pp.pprint(client.finish_sending(args[0],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
